{% extends 'base.html.twig' %}

{% block title %}{{ vm.name }}{% endblock %}

{% block stylesheets %}
    <style>
        /* VM Header */
        .vm-header {
            background: var(--card-bg);
            padding: 1.25rem 1.5rem;
            border-radius: 8px;
            margin-bottom: 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-color);
        }

        .vm-header h1 {
            margin: 0;
            color: var(--text-primary);
            font-size: 1.5rem;
            font-weight: 700;
        }

        .vm-status-running { 
            color: var(--success); 
            font-weight: 600; 
        }
        
        .vm-status-stopped { 
            color: var(--danger); 
            font-weight: 600; 
        }

        .vm-info {
            display: flex;
            gap: 1.5rem;
            margin-top: 0.5rem;
            color: var(--text-secondary);
        }

        .vm-info-item {
            display: flex;
            flex-direction: column;
            gap: 2px;
        }

        .vm-info-label {
            font-size: 0.6875rem;
            color: var(--text-tertiary);
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .vm-info-value {
            font-weight: 600;
            color: var(--text-primary);
            font-size: 0.875rem;
        }

        /* Tabs styling */
        .vm-tabs {
            border-bottom: 2px solid var(--border-color);
            margin-bottom: 0;
            background: var(--card-bg);
            border-radius: 8px 8px 0 0;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-color);
            border-bottom: none;
        }

        .vm-tabs ul {
            list-style: none;
            padding: 0;
            margin: 0;
            display: flex;
            gap: 0;
        }

        .vm-tabs li {
            margin: 0;
        }

        .vm-tabs .tab-link {
            display: block;
            padding: 0.75rem 1.25rem;
            text-decoration: none;
            color: var(--text-secondary);
            border-bottom: 3px solid transparent;
            transition: all 0.2s ease;
            font-weight: 500;
            font-size: 0.8125rem;
        }

        .vm-tabs .tab-link:hover {
            color: var(--text-primary);
            background-color: var(--gray-50);
        }
        
        .vm-tabs .tab-link:focus-visible {
            outline: 2px solid var(--primary-600);
            outline-offset: -2px;
        }

        .vm-tabs .tab-link.active {
            color: var(--primary-600);
            border-bottom-color: var(--primary-600);
            font-weight: 600;
        }

        /* Tab content */
        .tab-content {
            background: var(--card-bg);
            padding: 1.25rem;
            border-radius: 0 0 8px 8px;
            min-height: 400px;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-color);
            border-top: none;
        }
        
        .tab-content h4 {
            margin: 0 0 1rem 0;
            font-size: 1rem;
            font-weight: 600;
            color: var(--text-primary);
        }

        .tab-pane {
            display: none;
        }

        .tab-pane.active {
            display: block;
        }

        /* Charts grid */
        .charts-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
            margin-top: 1rem;
        }

        .chart-container {
            background: var(--gray-50);
            padding: 1rem;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            box-shadow: var(--shadow-sm);
            min-height: 0;
            min-width: 0;
        }

        .chart-container h5 {
            margin: 0 0 0.75rem 0;
            color: var(--text-primary);
            font-size: 0.8125rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .chart-container canvas {
            max-height: 180px !important;
            width: 100% !important;
            height: auto !important;
        }

        /* Console styling */
        .console-container {
            background: var(--gray-900);
            border-radius: 12px;
            overflow: hidden;
            margin-top: 1rem;
            border: 1px solid var(--gray-700);
        }

        .console-toolbar {
            background: var(--gray-800);
            padding: 0.75rem 1rem;
            border-bottom: 1px solid var(--gray-700);
            display: flex;
            gap: 0.75rem;
        }

        .console-toolbar button {
            font-size: 0.9rem;
            padding: 0.5rem 1rem;
        }

        .console-screen {
            padding: 1.5rem;
            min-height: 500px;
            background: var(--gray-900);
            color: #4ade80;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            font-size: 0.9375rem;
            line-height: 1.6;
        }

        .console-screen p {
            margin: 0.5rem 0;
        }
        
        .console-screen p.muted {
            color: var(--gray-500) !important;
        }

        /* Snapshot actions */
        .snapshot-actions {
            margin-bottom: 1.5rem;
        }

        /* Badges for event types */
        .badge-success {
            background: var(--success);
            color: white;
            padding: 0.375rem 0.75rem;
            border-radius: 6px;
            font-size: 0.8125rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .badge-warning {
            background: var(--warning);
            color: white;
            padding: 0.375rem 0.75rem;
            border-radius: 6px;
            font-size: 0.8125rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .badge-info {
            background: var(--primary-600);
            color: white;
            padding: 0.375rem 0.75rem;
            border-radius: 6px;
            font-size: 0.8125rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        /* Actions */
        .actions a {
            margin-right: 0.5rem;
        }

        /* Back button */
        .back-link {
            display: inline-flex;
            align-items: center;
            gap: 0.375rem;
            margin-bottom: 1rem;
            color: var(--primary-600);
            text-decoration: none;
            font-weight: 600;
            padding: 0.375rem 0.5rem;
            border-radius: 6px;
            transition: all 0.2s;
            font-size: 0.8125rem;
        }

        .back-link:hover {
            color: var(--primary-700);
            background: var(--primary-50);
        }
        
        .back-link:focus-visible {
            box-shadow: var(--focus-ring);
        }

        /* Responsive adjustments */
        @media (max-width: 1200px) {
            .charts-grid {
                grid-template-columns: 1fr 1fr;
            }
        }
        
        @media (max-width: 1024px) {
            .vm-header {
                padding: 1rem;
            }
            
            .vm-header h1 {
                font-size: 1.25rem;
            }
        }
        
        @media (max-width: 768px) {
            .vm-header {
                flex-direction: column;
                align-items: flex-start;
                padding: 0.875rem;
                gap: 0.75rem;
            }
            
            .vm-header h1 {
                font-size: 1.125rem;
            }

            .vm-info {
                flex-wrap: wrap;
                gap: 1rem;
            }

            .vm-tabs .tab-link {
                padding: 0.625rem 0.875rem;
                font-size: 0.75rem;
            }
            
            .tab-content {
                padding: 1rem;
            }
            
            .tab-content h4 {
                font-size: 0.9375rem;
            }
            
            .charts-grid {
                grid-template-columns: 1fr;
                gap: 0.75rem;
            }
            
            .chart-container {
                padding: 0.75rem;
            }
            
            .chart-container canvas {
                max-height: 160px !important;
            }
        }
        
        @media (max-width: 480px) {
            .vm-info {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .vm-tabs ul {
                flex-wrap: wrap;
            }
            
            .vm-tabs .tab-link {
                flex: 1 1 45%;
                text-align: center;
                padding: 0.5rem 0.375rem;
                font-size: 0.6875rem;
            }
            
            .tab-content {
                padding: 0.75rem;
                min-height: 300px;
            }
        }
    </style>
{% endblock %}

{% block body %}
<a href="{{ path('app_list_v_ms') }}" class="back-link">← Retour à la liste</a>

    <div class="vm-header">
        <div>
            <h1>{{ vm.name }}</h1>
            <div class="vm-info">
                <div class="vm-info-item">
                    <span class="vm-info-label">IP</span>
                    <span class="vm-info-value">{{ vm.ip }}</span>
                </div>
                <div class="vm-info-item">
                    <span class="vm-info-label">CPU</span>
                    <span class="vm-info-value">{{ vm.cpu }} vCPU</span>
                </div>
                <div class="vm-info-item">
                    <span class="vm-info-label">RAM</span>
                    <span class="vm-info-value">{{ vm.ram }}</span>
                </div>
                <div class="vm-info-item">
                    <span class="vm-info-label">Statut</span>
                    <span class="vm-info-value">
                        {% if vm.status == 'running' %}
                            <span class="vm-status-running">● En cours</span>
                        {% else %}
                            <span class="vm-status-stopped">● Arrêtée</span>
                        {% endif %}
                    </span>
                </div>
            </div>
        </div>
        <div>
            {% if vm.status == 'running' %}
                <a href="#" class="danger">Arrêter</a>
            {% else %}
                <a href="#" class="primary">Démarrer</a>
            {% endif %}
        </div>
    </div>

    {# Onglets #}
    <nav class="vm-tabs">
        <ul>
            <li><a href="#" class="tab-link active" data-tab="summary">📊 Résumé</a></li>
            <li><a href="#" class="tab-link" data-tab="console">💻 Console</a></li>
            <li><a href="#" class="tab-link" data-tab="snapshots">📸 Snapshots</a></li>
            <li><a href="#" class="tab-link" data-tab="events">📋 Événements</a></li>
        </ul>
    </nav>

    {# Contenu des onglets #}
    <div class="tab-content">
        {# Onglet 1: Résumé avec graphiques #}
        <div id="tab-summary" class="tab-pane active">
            <h4>Utilisation sur les 24 dernières heures</h4>
            <div class="charts-grid">
                <div class="chart-container">
                    <h5>CPU (%)</h5>
                    <canvas id="cpuChart"></canvas>
                </div>
                <div class="chart-container">
                    <h5>RAM (%)</h5>
                    <canvas id="ramChart"></canvas>
                </div>
                <div class="chart-container">
                    <h5>Disque (%)</h5>
                    <canvas id="diskChart"></canvas>
                </div>
                <div class="chart-container">
                    <h5>Réseau (Mbps)</h5>
                    <canvas id="networkChart"></canvas>
                </div>
            </div>
        </div>

        {# Onglet 2: Console #}
        <div id="tab-console" class="tab-pane">
            <h4>Console de la VM</h4>
            <div class="console-container">
                <div class="console-toolbar">
                    <button class="secondary">🖥️ Plein écran</button>
                    <button class="secondary">⌨️ Ctrl+Alt+Del</button>
                    <button class="secondary">🔄 Redémarrer</button>
                </div>
                <div class="console-screen">
                    <p>Connexion à la console de {{ vm.name }}...</p>
                    <p>$ _</p>
                    <p class="muted" style="margin-top: 2rem;">La console VNC/noVNC sera intégrée ici</p>
                </div>
            </div>
        </div>

        {# Onglet 3: Snapshots #}
        <div id="tab-snapshots" class="tab-pane">
            <h4>Snapshots de {{ vm.name }}</h4>
            <div class="snapshot-actions">
                <button class="primary">+ Créer un snapshot</button>
            </div>
            <table>
                <thead>
                    <tr>
                        <th>Nom</th>
                        <th>Date</th>
                        <th>Taille</th>
                        <th>Description</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for snapshot in vm.snapshots %}
                        <tr>
                            <td>{{ snapshot.name }}</td>
                            <td>{{ snapshot.date }}</td>
                            <td>{{ snapshot.size }}</td>
                            <td>{{ snapshot.description }}</td>
                            <td class="actions">
                                <a href="#" class="secondary">Restaurer</a>
                                <a href="#" class="danger">Supprimer</a>
                            </td>
                        </tr>
                    {% else %}
                        <tr>
                            <td colspan="5" style="text-align: center;">Aucun snapshot disponible</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>

        {# Onglet 4: Événements #}
        <div id="tab-events" class="tab-pane">
            <h4>Événements de {{ vm.name }}</h4>
            <table>
                <thead>
                    <tr>
                        <th>Date/Heure</th>
                        <th>Type</th>
                        <th>Message</th>
                        <th>Utilisateur</th>
                    </tr>
                </thead>
                <tbody>
                    {% for event in vm.events %}
                        <tr>
                            <td>{{ event.date }}</td>
                            <td>
                                {% if event.type == 'info' %}
                                    <span class="badge-info">Info</span>
                                {% elseif event.type == 'maintenance' %}
                                    <span class="badge-warning">Maintenance</span>
                                {% else %}
                                    <span class="badge-success">{{ event.type }}</span>
                                {% endif %}
                            </td>
                            <td>{{ event.message }}</td>
                            <td>{{ event.user }}</td>
                        </tr>
                    {% else %}
                        <tr>
                            <td colspan="4" style="text-align: center;">Aucun événement</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>

{% block javascripts %}
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let charts = {};

            // Tab switching
            document.querySelectorAll('.tab-link').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const targetTab = this.dataset.tab;
                    
                    // Remove active class from all tabs and panes
                    document.querySelectorAll('.tab-link').forEach(tab => tab.classList.remove('active'));
                    document.querySelectorAll('.tab-pane').forEach(pane => pane.classList.remove('active'));
                    
                    // Add active class to clicked tab and corresponding pane
                    this.classList.add('active');
                    document.getElementById(`tab-${targetTab}`).classList.add('active');
                });
            });

            // Initialize charts on page load
            initializeCharts();

            function initializeCharts() {
                // Generate sample data for 24 hours (24 points)
                const hours = [];
                const now = new Date();
                for (let i = 23; i >= 0; i--) {
                    const hour = new Date(now.getTime() - (i * 60 * 60 * 1000));
                    hours.push(hour.getHours() + 'h');
                }

                // CPU Chart
                charts.cpu = new Chart(document.getElementById('cpuChart'), {
                    type: 'line',
                    data: {
                        labels: hours,
                        datasets: [{
                            label: 'CPU (%)',
                            data: generateRandomData(24, 20, 80),
                            borderColor: 'rgb(75, 192, 192)',
                            backgroundColor: 'rgba(75, 192, 192, 0.1)',
                            tension: 0.4,
                            fill: true,
                            borderWidth: 2,
                            pointRadius: 0,
                            pointHoverRadius: 4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                max: 100,
                                ticks: {
                                    font: { size: 10 }
                                }
                            },
                            x: {
                                ticks: {
                                    font: { size: 10 },
                                    maxRotation: 0,
                                    autoSkip: true,
                                    maxTicksLimit: 8
                                }
                            }
                        }
                    }
                });

                // RAM Chart
                charts.ram = new Chart(document.getElementById('ramChart'), {
                    type: 'line',
                    data: {
                        labels: hours,
                        datasets: [{
                            label: 'RAM (%)',
                            data: generateRandomData(24, 30, 70),
                            borderColor: 'rgb(153, 102, 255)',
                            backgroundColor: 'rgba(153, 102, 255, 0.1)',
                            tension: 0.4,
                            fill: true,
                            borderWidth: 2,
                            pointRadius: 0,
                            pointHoverRadius: 4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                max: 100,
                                ticks: {
                                    font: { size: 10 }
                                }
                            },
                            x: {
                                ticks: {
                                    font: { size: 10 },
                                    maxRotation: 0,
                                    autoSkip: true,
                                    maxTicksLimit: 8
                                }
                            }
                        }
                    }
                });

                // Disk Chart
                charts.disk = new Chart(document.getElementById('diskChart'), {
                    type: 'line',
                    data: {
                        labels: hours,
                        datasets: [{
                            label: 'Disque (%)',
                            data: generateRandomData(24, 40, 60),
                            borderColor: 'rgb(255, 159, 64)',
                            backgroundColor: 'rgba(255, 159, 64, 0.1)',
                            tension: 0.4,
                            fill: true,
                            borderWidth: 2,
                            pointRadius: 0,
                            pointHoverRadius: 4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                max: 100,
                                ticks: {
                                    font: { size: 10 }
                                }
                            },
                            x: {
                                ticks: {
                                    font: { size: 10 },
                                    maxRotation: 0,
                                    autoSkip: true,
                                    maxTicksLimit: 8
                                }
                            }
                        }
                    }
                });

                // Network Chart
                charts.network = new Chart(document.getElementById('networkChart'), {
                    type: 'line',
                    data: {
                        labels: hours,
                        datasets: [{
                            label: 'Réseau (Mbps)',
                            data: generateRandomData(24, 10, 100),
                            borderColor: 'rgb(255, 99, 132)',
                            backgroundColor: 'rgba(255, 99, 132, 0.1)',
                            tension: 0.4,
                            fill: true,
                            borderWidth: 2,
                            pointRadius: 0,
                            pointHoverRadius: 4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    font: { size: 10 }
                                }
                            },
                            x: {
                                ticks: {
                                    font: { size: 10 },
                                    maxRotation: 0,
                                    autoSkip: true,
                                    maxTicksLimit: 8
                                }
                            }
                        }
                    }
                });
            }

            // Helper function to generate random data
            function generateRandomData(length, min, max) {
                const data = [];
                for (let i = 0; i < length; i++) {
                    data.push(Math.floor(Math.random() * (max - min + 1)) + min);
                }
                return data;
            }
        });
    </script>
{% endblock %}
{% endblock %}

